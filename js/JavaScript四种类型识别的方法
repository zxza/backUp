---
title: JavaScript四种类型识别的方法
tags: JavaScript,类型识别
---

### typeof运算符
&emsp; typeof是一元运算符，放在单个操作数的前面，返回值为表示操作数类型的首字母小写的字符串，typeof运算符后面带不带圆括号都可以

    console.log(typeof 'a') //string
    console.log(typeof ('a')) //string
    
#### **识别**
&emsp; [1]可以识别标准类型（将NULL识别为'object'）
&emsp; [2]不能识别具体的对象类型(Function除外)

    console.log(typeof "jerry");//"string"
    console.log(typeof 12);//"number"
    console.log(typeof true);//"boolean"
    console.log(typeof undefined);//"undefined"
    console.log(typeof null);//"object"
    console.log(typeof {name: "jerry"});//"object"
    
    console.log(typeof function(){});//"function"
    console.log(typeof []);//"object"
    console.log(typeof new Date);//"object"
    console.log(typeof /\d/);//"object"
    function Person(){};
    console.log(typeof new Person);//"object"
    
&emsp; 判断一个值是否为null类型的最佳方法是直接和null进行恒等比较

    console.log(typeof null);//'object'
    console.log(null === null);//true
    console.log(undefined === null);//false
    console.log('null' === null);//false
    
### instanceof运算符
&emsp; instanceof是一个二元运算符，左操作数是一个对象，右操作数是一个构造函数。如果左侧的对象是右侧构造函数的实例对象，则表达式返回true；否则返回false
&emsp; 如果左操作数不是一个对象，返回false，如果右操作数不是构造函数，则抛出一个类型错误异常TypeError

    console.log(123 instanceof function(){}) //false
    console.log({} instanceof 123) //Uncaught SyntaxError: Unexpected token instanceof

&emsp; 所有的对象都是Object实例
#### **识别**
&emsp; [1]可以识别内置对象类型、自定义类型及其父类型
&emsp; [2]不能识别标准类型，返回false
&emsp; [3]不能识别null、undefined，会报错

    console.log("jerry" instanceof String);//false
    console.log(12 instanceof Number);//false
    console.log(true instanceof Boolean);//false
    console.log(undefined instanceof Undefined);//报错
    console.log(null instanceof Null);//报错
    console.log({name: "jerry"} instanceof Object);//true
    
    console.log(function(){} instanceof Function);//true
    console.log([] instanceof Array);//true
    console.log(new Date instanceof Date);//true
    console.log(/\d/ instanceof RegExp);//true
    function Person(){};
    console.log(new Person instanceof Person);//true
    console.log(new Person instanceof Object);//true
    
### constructor属性
&emsp; 实例对象的constructor属性指向其构造函数。如果是内置类型，则输出function 数据类型(){[native code]};如果是自定义类型，则输出function数据类型(){ }
#### **识别**
&emsp; [1]可以识别内置对象类型、自定义类型及其父类型
&emsp; [2]不能识别标准类型，返回false