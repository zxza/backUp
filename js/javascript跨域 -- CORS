---
title: javascript跨域 -- CORS
tags: javascript,跨域
---

### CORS简述
&emsp; Ajax通过XHR对象进行通信，但是XHR对象只能访问与包含它的页面位于同一个域中的资源。但是合理的跨域请求开发对某些浏览器是至关重要。所以CORS（Cross-Origin Resource Sharing）跨域资源共享便被W3C提出，定义了在必须访问跨域资源时，浏览器与服务器应该如何通信。

        它允许浏览器向跨域服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。
 
### CORS思想
&emsp; 使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应应该成功还是失败
    
### CORS类别
&emsp; 浏览器将CORS请求分为两类：简单请求（simple request）和非简单请求（not-so-simple request）

### CORS简单请求
&emsp; 简单请求需要同时满足浏览器给定的以下两个条件
 

&emsp; 1. 请求方法是以下三种之一：

        HEAD、GET、POST
&emsp; 2. HTTP头不超过以下几种字段：

        Accept、Accept-Language、Content-Language、Last-Event-ID、(Content-Type:只限于三个值applacation/x-www-form-urlencoded、multipart/form-data、text/plain)
        
&emsp; 凡是不满足以上两种条件都属于非简单请求
&emsp; 浏览器发现此次AJAX跨域是一个简单请求，会自动在请求头中携带Origin的header，表明这是一个跨域的请求，Origin字段用来说明，本次请求来自哪个源(协议 + 端口 + 域名).服务器根据这个值，决定是否同意此次请求。

    

> Accept:*/*
>     Accept-Encoding:gzip, deflate, br
>     Accept-Language:zh-CN,zh;q=0.8,en;q=0.6
>     Connection:keep-alive
>     Content-Length:0
>     Host:www.webhuochai.com
>     Origin:http://127.0.0.1
>     Referer:http://127.0.0.1/cors.html
>     User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98
> Safari/537.36

&emsp; 如果服务器认为此次请求可接受，将会在Access-Control-Allow-Origin头部回发相同的源信息（如果是公共资源，可以回发"*"）
&emsp; 如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP响应请求。如果浏览器获取响应请求中没有Access-Control-Allow-Origin字段，就会自动抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。但是，这种错误无法通过状态码获取，因为HTTP回应的状态码可能是200;

&emsp; 

### CORS原生支持
&emsp; 标准浏览器都实现了对XMLHttpRequest对象的支持。在访问不同源的资源时，不需要额外编写代码就可以实现AJAX跨域请求。只需要在open（）方法中指定特定的url即可
&emsp; CORS主要是需要在后端进行设置，以PHP为例,可通过设置header（）方法提交请求,也可以指定特定的源

    header("Access-Control-Allow-Origin : * ")
    header("Access-Control-Allow-Origin : https://www.zxza.com")
    
### CORS安全限制

 1. 不能使用setRequestHeader()设置自定义头部
 2. 不能发送和接受cookie
 3. 调用getAllResponseHeader()方法总会返回空字符串

### 带凭证的请求
&emsp; 默认情况下，跨域请求不携带任何请求凭证（cookie、HTTP认证、客户端SSH证明等），但是通过设置withCredentials属性指定为true，可以指定携带某些凭证

    IE10-以下不支持
&emsp; 如果服务器接受带凭证的请求，会用下面的HTTP响应

    Access-Control-Allow-Credentials : true;
&emsp; 开发者必须在请求AJAX的时候开发withCredential

    
    
    
    
    
    
    
    
    
    
    
    
    
    